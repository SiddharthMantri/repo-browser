{"version":3,"sources":["api/index.ts","hooks/useAsyncInput.ts","components/UserCard/index.tsx","components/DetailCard/index.tsx","components/OrgsCard/index.tsx","components/ReposCard/index.tsx","components/ErrorBoundary/index.js","domain/user-data/index.tsx","domain/user-search/index.tsx","domain/home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","request","method","url","params","Promise","resolve","reject","options","baseURL","validateStatus","status","axios","then","response","data","catch","error","API","searchUser","searchVal","a","getRepos","get","userData","username","all","useAsyncInput","useState","value","setValue","setResponse","loading","setLoading","searchGithubUser","useCallback","searchString","debouncedSearch","fn","ref","useRef","current","useConstant","AwesomeDebouncePromise","onChange","useAsync","length","e","target","items","useStyles","makeStyles","root","minWidth","marginBottom","bullet","display","margin","transform","title","fontSize","pos","UserCard","user","onClick","classes","Card","className","CardActionArea","CardMedia","component","alt","login","height","image","avatar_url","CardContent","Typography","gutterBottom","variant","CardActions","Button","size","color","theme","maxWidth","media","paddingTop","expand","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","DetailCard","CardHeader","Avatar","aria-label","subheader","name","List","dense","disablePadding","ListItem","ListItemText","primary","ListItemSecondaryAction","public_repos","followers","OrgsCard","orgs","scrollableResults","map","org","i","key","secondary","description","ReposCard","repos","repo","ErrorBoundary","props","state","hasError","errorMessage","this","children","React","Component","UserData","Grid","item","xs","lg","toolbar","mixins","resultContainer","background","padding","spacing","width","borderRight","palette","grey","maxHeight","overflow","UserSearch","onStringChange","setUser","setOrgs","setRepos","loadUserData","userString","repos_url","useEffect","container","TextField","fullWidth","placeholder","LinearProgress","appBar","content","flexGrow","default","Home","CssBaseline","AppBar","position","Toolbar","noWrap","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af2b4e23.chunk.js","sourcesContent":["import axios from 'axios'\nimport { async } from 'q';\n\nconst BASE_URL = \"https://api.github.com\";\nconst GET = 'GET';\nconst POST = 'POST';\n\n\n\nconst request = (method: string, url: string, params?: any) => new Promise((resolve, reject) => {\n    if (typeof params !== 'object') params = {};\n    const options = {\n        method,\n        url,\n        baseURL: BASE_URL,\n        validateStatus: (status: Number): boolean => status >= 200 && status < 300,\n        ...params,\n    };\n\n    axios.request(options).then((response) => {\n        if (response.status === 200) {\n            resolve(response.data);\n        } else {\n            resolve({ response });\n        }\n    }).catch((error) => {\n        resolve({ error });\n    });\n});\n\nconst API = {\n    searchUser: async (searchVal: string) => await request(GET, `search/users?q=${searchVal}`),\n    getRepos: async (url: string) => axios.get(url),\n    userData: async (username: string) => axios.all([\n        axios.get(`${BASE_URL}/users/${username}`),\n        axios.get(`${BASE_URL}/users/${username}/orgs`)\n    ])\n};\n\nexport default API;\n\n","import AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { useCallback, useState, useRef } from 'react';\nimport { useAsync } from 'react-async-hook';\nimport API from '../api';\n\n\n/**\n * Hook that has a semantic guarantee for exactly one value at any time,\n * something useMemo doesn't guarantee\n * @param {} fn\n */\ntype ResBox<T> = { value: T }\n\nconst useConstant = <T>(fn: () => T): T => {\n    const ref = useRef<ResBox<T>>();\n    if (!ref.current) {\n        ref.current = { value: fn() };\n    }\n    return ref.current.value;\n};\n\n\nconst useAsyncInput = (searchVal: string) => {\n    const [value, setValue] = useState(searchVal);\n    const [response, setResponse] = useState();\n    const [loading, setLoading] = useState(false);\n    const searchGithubUser = useCallback((searchString: string) => {\n        setLoading(true)\n        API.searchUser(searchString).then(data => {\n            setLoading(false)\n            setResponse(data);\n        })\n    }, [])\n    // @ts-ignore\n    const debouncedSearch = useConstant((value: string) => AwesomeDebouncePromise(searchGithubUser, 300));\n    const searchResult = useAsync(async () => {\n        if (value.length === 0) {\n            return {};\n        }\n        return debouncedSearch(value);\n    }, [value]);\n    const onChange = useCallback((e) => {\n        setValue(e.target.value);\n        if (e.target.value === '') {\n            setResponse({ items: [] })\n        }\n    }, []);\n\n    return [value, onChange, response, loading]\n}\nexport default useAsyncInput;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardActions, CardContent, CardActionArea, Button, Typography, CardMedia } from '@material-ui/core';\nimport { SearchResultType } from '../../types/types';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginBottom: \"12px\"\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nconst UserCard = ({ user, onClick }: { user: SearchResultType, onClick: any }) => {\n    const classes = useStyles();\n    const onClickLoad = () => {\n        onClick(user.login)\n    }\n\n    return (\n        <Card className={classes.root}>\n            <CardActionArea>\n                <CardMedia\n                    component=\"img\"\n                    alt={user.login}\n                    height=\"140\"\n                    image={user.avatar_url}\n                    title={user.avatar_url}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {user.login}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\" onClick={onClickLoad}>\n                    View profile\n                </Button>\n            </CardActions>\n        </Card>\n    );\n}\nexport default UserCard","import { List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Collapse from '@material-ui/core/Collapse';\nimport { red } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport React, { useEffect, useState } from 'react';\nimport { GithubUserType, RepoType } from '../../types/types';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        maxWidth: '100%',\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    avatar: {\n        backgroundColor: red[500],\n    },\n}));\n\nconst DetailCard = ({ user }: { user: GithubUserType }) => {\n    const classes = useStyles();\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"user-login\" className={classes.avatar}>\n                        {user && user.login && user.login.length > 0 ? user.login[0] : ''}\n                    </Avatar>\n                }\n                title={user.login}\n                subheader={user.name}\n            />\n            <CardMedia\n                className={classes.media}\n                image={user.avatar_url}\n                title={user.login}\n            />\n            <CardContent>\n                <List dense disablePadding>\n                    <ListItem>\n                        <ListItemText primary=\"Repositories\" />\n                        <ListItemSecondaryAction>\n                            <ListItemText primary={user.public_repos} />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText primary=\"Followers\" />\n                        <ListItemSecondaryAction>\n                            <ListItemText primary={user.followers} />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                </List>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default DetailCard;","import { Card, CardContent, List, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { Orgs } from '../../types/types';\n\n\nconst OrgsCard = ({ orgs, classes }: { orgs: Array<Orgs>, classes: Record<\"toolbar\" | \"resultContainer\" | \"scrollableResults\", string> }) => (\n    <Card>\n        <CardContent className={classes.scrollableResults}>\n            <Typography variant='h6'>\n                Organisations\n            </Typography>\n            {orgs.length === 0 ?\n                <Typography variant=\"body1\">\n                    This user is not part of any Github Organisations\n                </Typography>\n                : null}\n            <List dense disablePadding>\n                {orgs.map((org, i) => (\n                    <ListItem key={i}>\n                        <ListItemText primary={org.login} secondary={org.description} />\n                    </ListItem>\n                ))}\n            </List>\n        </CardContent>\n    </Card>\n)\nexport default OrgsCard;","import React from 'react';\nimport { RepoType } from '../../types/types';\nimport { Card, CardContent, Typography, List, ListItem, ListItemText } from '@material-ui/core';\n\n\nconst ReposCard = ({ repos, classes }: { repos: Array<RepoType>, classes: Record<\"toolbar\" | \"resultContainer\" | \"scrollableResults\", string> }) => (\n    <Card>\n        <CardContent className={classes.scrollableResults}>\n            <Typography variant=\"h6\">\n                Public Repositories\n            </Typography>\n            {repos.length === 0 ?\n                <Typography variant=\"body1\">\n                    This user does not have any public repositories\n                </Typography>\n                : null}\n            <List dense disablePadding >\n                {repos.map((repo, i) => (\n                    <ListItem key={i}>\n                        <ListItemText primary={repo.name} secondary={repo.description} />\n                    </ListItem>\n                ))}\n            </List>\n        </CardContent>\n    </Card>\n)\nexport default ReposCard","import React from 'react';\n\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false, errorMessage: '' };\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true, errorMessage: error };\n    }\n\n\n    render() {\n        if (this.state.hasError) {\n            return <h4>{this.state.errorMessage}</h4>\n        }\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport DetailCard from '../../components/DetailCard';\nimport OrgsCard from '../../components/OrgsCard';\nimport ReposCard from '../../components/ReposCard';\nimport { GithubUserType, Orgs, RepoType } from '../../types/types';\nimport ErrorBoundary from '../../components/ErrorBoundary';\n\nconst UserData = ({ user, orgs, repos, classes }: { user: GithubUserType, orgs: Array<Orgs>, repos: Array<RepoType>, classes: Record<\"toolbar\" | \"resultContainer\" | \"scrollableResults\", string> }) => (\n    <>\n        <Grid item xs={12} lg={4}>\n            <ErrorBoundary>\n                <DetailCard user={user} />\n            </ErrorBoundary>\n        </Grid>\n        <Grid item xs={12} lg={4}>\n            <ErrorBoundary>\n                <OrgsCard orgs={orgs} classes={classes} />\n            </ErrorBoundary>\n        </Grid>\n        <Grid item xs={12} lg={4}>\n            <ErrorBoundary>\n                <ReposCard repos={repos} classes={classes} />\n            </ErrorBoundary>\n        </Grid>\n    </>\n)\nexport default UserData","import React, { useState, useEffect } from 'react';\nimport { Grid, TextField, makeStyles, List, ListItem, LinearProgress } from '@material-ui/core';\nimport useAsyncInput from '../../hooks/useAsyncInput';\nimport UserCard from '../../components/UserCard';\nimport { SearchResultType, GithubUserType, Orgs, RepoType } from '../../types/types';\nimport API from '../../api';\nimport UserData from '../user-data';\nimport ErrorBoundary from '../../components/ErrorBoundary';\n\n\nconst useStyles = makeStyles(theme => ({\n    toolbar: theme.mixins.toolbar,\n    resultContainer: {\n        background: \"white\",\n        height: `calc(100vh - 64px)`,\n        padding: theme.spacing(2),\n        width: '100%',\n        borderRight: `1px solid ${theme.palette.grey[200]}`\n    },\n    scrollableResults: {\n        maxHeight: `calc(100vh - 112px)`,\n        overflow: 'scroll'\n    }\n}))\n\nconst UserSearch = () => {\n    const classes = useStyles();\n    const [searchString, onStringChange, response, loading] = useAsyncInput('');\n    const [user, setUser] = useState<GithubUserType>({} as GithubUserType)\n    const [orgs, setOrgs] = useState<Array<Orgs>>([] as Array<Orgs>)\n    const [repos, setRepos] = useState<Array<RepoType>>([] as Array<RepoType>)\n    const getRepos = (url: string) => {\n        API.getRepos(url).then((repos) => {\n            if (repos.status === 200) {\n                setRepos(repos.data)\n            }\n        })\n    }\n    const loadUserData = (userString: string) => {\n        API.userData(userString).then(([user, orgs]) => {\n            if (user.status === 200) {\n                setUser(user.data)\n                getRepos(user.data.repos_url);\n            }\n            if (orgs.status === 200) {\n                setOrgs(orgs.data)\n            }\n        })\n    }\n    useEffect(() => {\n        if (searchString === '') {\n            setUser({} as GithubUserType)\n            setOrgs([] as Array<Orgs>)\n            setRepos([] as Array<RepoType>)\n        }\n    }, [searchString])\n    return (\n        <Grid container spacing={0}>\n            <Grid container item xs={3}>\n                <div className={classes.resultContainer}>\n                    <TextField value={searchString} onChange={onStringChange} fullWidth placeholder={\"Start by typing a Github Username...\"} />\n                    {loading ? <LinearProgress /> : null}\n                    <div className={classes.scrollableResults}>\n                        <ErrorBoundary>\n                            {response ? response.items.map((user: SearchResultType, i: number) => (\n                                <UserCard user={user} key={i} onClick={loadUserData} />\n                            )) : null}\n                        </ErrorBoundary>\n                    </div>\n                </div>\n\n            </Grid>\n            <Grid container item xs={9} spacing={1}>\n                <ErrorBoundary>\n                    {user.login || orgs.length > 0 ? <UserData classes={classes} user={user} orgs={orgs} repos={repos} /> : null}\n                </ErrorBoundary>\n            </Grid>\n        </Grid >\n    )\n}\nexport default UserSearch","import { AppBar, CssBaseline, makeStyles, Toolbar, Typography } from '@material-ui/core';\nimport React from 'react';\nimport UserSearch from '../user-search';\nimport ErrorBoundary from '../../components/ErrorBoundary';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        width: '100%',\n    },\n    toolbar: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.default,\n        padding: theme.spacing(0),\n    },\n}));\n\nconst Home = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" noWrap>\n                        Github Repo Browser\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <ErrorBoundary>\n                    <UserSearch />\n                </ErrorBoundary>\n            </main>\n        </div>\n    );\n}\nexport default Home","import React from 'react';\nimport './App.css';\nimport Home from './domain/home';\n\nconst App = () => <Home />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}